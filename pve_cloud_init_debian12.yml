---
- name: Create cloud images
  hosts: pve01
  become: true
  gather_facts: false
  vars:
    node_target: pve
    iso_source_url: "https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-genericcloud-amd64.qcow2"
    iso_target_path: "/var/lib/vz/template/iso/debian-12-genericcloud-amd64.qcow2"
    storage_target: "local-lvm"
    vm_defs:
      - id: 2000
        name: "cloudimage-Debian12"
        nets:
          - id: 0
            bridge: "vmbr0"

  tasks:
  # PIP is required to install the proxmoxer library, needed by community.general ansible collection.
    # - name: Install pip
    #   ansible.builtin.apt:
    #     name:
    #       - pip
    #     state: present

    # - name: Install Proxmoxer on the machine
    #   ansible.builtin.pip:
    #     name: proxmoxer
    #     state: present

    - name: Download cloud image to NFS storage
      ansible.builtin.get_url:
        url: "{{ iso_source_url }}"
        dest: "{{ iso_target_path }}"
        mode: 0777

    - name: Create new cloud images
      community.general.proxmox_kvm:
        api_user: "{{proxmox_api_user}}"
        api_token_id: "{{proxmox_api_token_id}}"
        api_token_secret: "{{ proxmox_api_token_secret }}"
        api_host: "{{ proxmox_api_host }}"
        name: "{{ item.name }}"
        vmid: "{{ item.id }}"
        serial:
          serial0: 'socket'
        vga: serial0
        scsihw: 'virtio-scsi-pci'
        node: "{{ node_target }}"
        citype: nocloud
        ciuser: "ansible"
        cipassword: "{{ proxmox_ci_password }}"
      loop: "{{ vm_defs }}"

    - name: Assign network interfaces to image
      community.general.proxmox_nic:
        api_user: "{{proxmox_api_user}}"
        api_token_id: "{{proxmox_api_token_id}}"
        api_token_secret: "{{ proxmox_api_token_secret }}"
        api_host: "{{ proxmox_api_host }}"
        vmid: "{{ item.0.id }}"
        interface: "net{{ item.1.id }}"
        bridge: "vmbr0"
        tag: "{{ item.1.tag | default(0) }}"
      loop: "{{ vm_defs | subelements('nets') }}"

      # I can't get this to work. Import_from requires running as root, which I am..  but any other way the disk doesn't create.
    # - name: Importing the cloud image disk
    #   community.general.proxmox_disk:
    #     api_host: "{{ api_host }}"
    #     api_user: "{{ api_user }}"
    #     api_token_id: "{{ api_token_id }}"
    #     api_token_secret: "{{ proxmox_api_secret }}"
    #     import_from: "{{ iso_target_path }}"
    #     vmid: " {{ item.id }}"
    #     storage: "{{ storage_target }}"
    #     disk: "scsi0"
    #     state: present
    #     # size: 5
    #     create: forced
    #   loop: "{{ vm_defs }}"

    - name: Import the cloned image disk
      ansible.builtin.shell:
        cmd: "qm importdisk {{ item.id }} {{ iso_target_path }} {{ storage_target }}"
      loop: "{{ vm_defs }}"

      # Again, not sure how to do this through a playbook task..
      # trying to attach the imported disk to the VM.
    # - name: Set the disk image as disk 0
    #   community.general.proxmox_disk:
    #     api_host: "{{ api_host }}"
    #     api_user: "{{ api_user }}"
    #     api_token_id: "{{ api_token_id }}"
    #     api_token_secret: "{{ proxmox_api_secret }}"
    #     vmid: "{{ item.id }}"
    #     state: present
    #     disk: "unused0"
    #   loop: "{{ vm_defs }}"

    - name: Attach the cloned disk.
      ansible.builtin.shell:
        cmd: "qm set {{ item.id }} --scsi0 {{ storage_target }}:vm-{{ item.id }}-disk-0"
      loop: "{{ vm_defs }}"

    # TODO: not idempotent
    # - name: Add the CloudInit disk
    #   ansible.builtin.shell:
    #     cmd: "qm set {{ item.id }} --ide2 {{ storage_target }}:cloudinit"
    #   loop: "{{ vm_defs }}"

    - name: Set the boot disk
      community.general.proxmox_kvm:
        api_user: "{{proxmox_api_user}}"
        api_token_id: "{{proxmox_api_token_id}}"
        api_token_secret: "{{ proxmox_api_token_secret }}"
        api_host: "{{ proxmox_api_host }}"
        node: "{{ node_target }}"
        vmid: "{{ item.id }}"
        boot: "c"
        bootdisk: "scsi0"
        update: true
      loop: "{{ vm_defs }}"

    # this breaks with "__NSCFConstantString initialize" on Mac OS X
    # export no_proxy=*
    # see https://github.com/ansible/ansible/issues/80191
    # TODO: also sshkeys does not work with multiple public keys from Github!
    - name: Set SSH keys
      community.general.proxmox_kvm:
        api_user: "{{proxmox_api_user}}"
        api_token_id: "{{proxmox_api_token_id}}"
        api_token_secret: "{{ proxmox_api_token_secret }}"
        api_host: "{{ proxmox_api_host }}"
        node: "{{ node_target }}"
        vmid: "{{ item.id }}"
        sshkeys: "{{  lookup('ansible.builtin.url', 'https://github.com/rngadam.keys') }}"
        update: true
      loop: "{{ vm_defs }}"

    - name: Convert to template
      ansible.builtin.shell:
        cmd: "qm template {{ item.id }}"
      loop: "{{ vm_defs }}"


    # - name: debug test
    #   ansible.builtin.debug:
    #     msg: "{{ item.id }}"
    #   loop: "{{ vm_defs }}"